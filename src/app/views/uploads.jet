{{ extends "common/layout" }}

{* Page title and description *}
{{ block title() }}My Uploads{{ end }}
{{ block metaDescription() }}Upload and manage your files{{ end }}

{{ block mainContent() }}
<div x-data="uploadsApp" x-init="initialize()" class="max-w-7xl mx-auto">
    <!-- SVG Definitions -->
    <svg width="0" height="0" class="hidden">
        <symbol id="svg-spinners--gooey-balls-2" viewBox="0 0 24 24">
            <defs>
                <filter id="svgSpinnersGooeyBalls20">
                    <feGaussianBlur in="SourceGraphic" result="y" stdDeviation="1"/>
                    <feColorMatrix in="y" result="z" values="1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 18 -7"/>
                    <feBlend in="SourceGraphic" in2="z"/>
                </filter>
            </defs>
            <g filter="url(#svgSpinnersGooeyBalls20)">
                <circle cx="5" cy="12" r="4" fill="currentColor">
                    <animate attributeName="cx" calcMode="spline" dur="2s" keySplines=".36,.62,.43,.99;.79,0,.58,.57" repeatCount="indefinite" values="5;8;5"/>
                </circle>
                <circle cx="19" cy="12" r="4" fill="currentColor">
                    <animate attributeName="cx" calcMode="spline" dur="2s" keySplines=".36,.62,.43,.99;.79,0,.58,.57" repeatCount="indefinite" values="19;16;19"/>
                </circle>
                <animateTransform attributeName="transform" dur="0.75s" repeatCount="indefinite" type="rotate" values="0 12 12;360 12 12"/>
            </g>
        </symbol>
    </svg>

    <!-- Header -->
    <div class="mb-8">
        <div class="flex items-center justify-between">
            <div class="flex items-center">
                <div class="h-14 w-14 rounded-2xl bg-gradient-to-br from-primary-500 to-primary-600 flex items-center justify-center shadow-lg">
                    <iconify-icon icon="tabler:cloud-upload" class="text-white" width="28" height="28"></iconify-icon>
                </div>
                <div class="ml-5">
                    <h1 class="text-2xl font-bold text-surface-900 dark:text-surface-100">File Uploads</h1>
                    <p class="mt-1 text-surface-600 dark:text-surface-400">Upload and manage your files</p>
                </div>
            </div>

            <div class="flex items-center space-x-4">
                <!-- Quick upload shortcut when on uploads tab -->
                <button x-show="currentTab === 'uploads'" @click="$refs.fileInput.click()" class="inline-flex items-center px-5 py-2.5 border border-transparent text-sm font-medium rounded-lg text-white bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 shadow-sm transition-all duration-200">
                    <iconify-icon icon="tabler:plus" class="mr-2" width="18" height="18"></iconify-icon>
                    Quick Upload
                </button>
            </div>
        </div>
    </div>

    <!-- Tab Navigation -->
    <div class="mb-8">
        <div class="border-b border-surface-200 dark:border-surface-600">
            <nav class="-mb-px flex space-x-8">
                <button
                        @click="switchTab('uploads')"
                        :class="currentTab === 'uploads' ? 'border-primary-500 text-primary-600 dark:text-primary-400' : 'border-transparent text-surface-500 dark:text-surface-400 hover:text-surface-700 dark:hover:text-surface-300'"
                        class="whitespace-nowrap py-3 px-1 border-b-2 font-semibold text-sm transition-all duration-200">
                    <div class="flex items-center">
                        <iconify-icon icon="tabler:upload" class="mr-2" width="18" height="18"></iconify-icon>
                        Upload Files
                        <span x-show="uploadQueue.length > 0" class="ml-2 px-2 py-0.5 rounded-md text-xs font-medium bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200" x-text="uploadQueue.length"></span>
                    </div>
                </button>
                <button
                        @click="switchTab('recent')"
                        :class="currentTab === 'recent' ? 'border-primary-500 text-primary-600 dark:text-primary-400' : 'border-transparent text-surface-500 dark:text-surface-400 hover:text-surface-700 dark:hover:text-surface-300'"
                        class="whitespace-nowrap py-3 px-1 border-b-2 font-semibold text-sm transition-all duration-200">
                    <div class="flex items-center">
                        <iconify-icon icon="tabler:files" class="mr-2" width="18" height="18"></iconify-icon>
                        Recent Uploads
                        <span class="ml-2 px-2 py-0.5 rounded-md text-xs font-medium bg-surface-100 dark:bg-surface-700 text-surface-600 dark:text-surface-300" x-text="totalItems"></span>
                    </div>
                </button>
            </nav>
        </div>
    </div>

    <!-- Upload Progress Warning -->
    <div x-show="processingUploads.length > 0 || isUploading" class="mb-6 bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-700 rounded-lg p-4">
        <div class="flex items-center">
            <iconify-icon icon="tabler:alert-triangle" class="text-amber-600 dark:text-amber-400 mr-3" width="20" height="20"></iconify-icon>
            <p class="text-sm text-amber-800 dark:text-amber-200">
                <strong>Files are processing.</strong> Please do not leave this page until all uploads are complete.
            </p>
        </div>
    </div>

    <!-- Tab Content -->
    <div>
        <!-- Upload Tab -->
        <div x-show="currentTab === 'uploads'" x-transition:enter="transition ease-out duration-300" x-transition:enter-start="opacity-0 transform translate-y-4" x-transition:enter-end="opacity-100 transform translate-y-0">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <!-- Upload Section -->
                <div class="bg-white dark:bg-surface-800 rounded-2xl shadow-sm border border-surface-200 dark:border-surface-700 overflow-hidden">
                    <!-- Upload Header -->
                    <div class="px-6 py-5 border-b border-surface-200 dark:border-surface-600">
                        <h3 class="text-lg leading-6 font-semibold text-surface-900 dark:text-surface-100">Upload Files</h3>
                        <p class="mt-1 text-sm text-surface-500 dark:text-surface-400">Drag and drop files or click to browse</p>
                    </div>

                    <!-- Drop Zone -->
                    <div class="p-6">
                        <div
                                @dragover.prevent="isDragging = true"
                                @dragleave.prevent="isDragging = false"
                                @drop.prevent="handleFileDrop($event)"
                                @click="$refs.fileInput.click()"
                                :class="{'border-primary-500 bg-primary-50 dark:bg-primary-900/20': isDragging}"
                                class="border-2 border-dashed border-surface-300 dark:border-surface-600 rounded-xl p-8 text-center cursor-pointer transition-colors duration-200 ease-in-out hover:bg-surface-50 dark:hover:bg-surface-700/50">

                            <div class="flex flex-col items-center">
                                <iconify-icon icon="tabler:cloud-upload" class="text-4xl text-surface-400 dark:text-surface-500 mb-4"></iconify-icon>
                                <p class="text-base font-medium text-surface-700 dark:text-surface-300 mb-2">
                                    Drop files here or click to browse
                                </p>
                                <p class="text-sm text-surface-500 dark:text-surface-400">
                                    Supports multiple files
                                </p>
                            </div>
                        </div>
                        <input type="file" x-ref="fileInput" @change="handleFileSelect" multiple class="hidden">
                    </div>

                    <!-- Upload Actions -->
                    <div x-show="uploadQueue.length > 0" class="px-6 pb-6">
                        <div class="flex space-x-3">
                            <button
                                    @click="startUpload"
                                    :disabled="isUploading || uploadQueue.length === 0"
                                    :class="{'opacity-50 cursor-not-allowed': isUploading || uploadQueue.length === 0}"
                                    class="flex-1 inline-flex items-center justify-center px-4 py-3 border border-transparent text-sm font-semibold rounded-lg text-white bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 shadow-sm transition-all duration-200">
                                <iconify-icon icon="tabler:upload" class="mr-2" width="16" height="16"></iconify-icon>
                                <span x-text="isUploading ? 'Uploading...' : 'Upload Files'"></span>
                            </button>
                            <button
                                    @click="clearFileSelection"
                                    class="px-4 py-3 border border-surface-300 dark:border-surface-600 text-sm font-medium rounded-lg text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-700 hover:bg-surface-50 dark:hover:bg-surface-600 transition-colors duration-200">
                                <iconify-icon icon="tabler:x" width="16" height="16"></iconify-icon>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- File Queue Section -->
                <div class="bg-white dark:bg-surface-800 rounded-2xl shadow-sm border border-surface-200 dark:border-surface-700 overflow-hidden">
                    <!-- Queue Header -->
                    <div class="px-6 py-5 border-b border-surface-200 dark:border-surface-600">
                        <div class="flex items-center justify-between">
                            <h3 class="text-lg leading-6 font-semibold text-surface-900 dark:text-surface-100">File Queue</h3>
                            <span x-show="uploadQueue.length > 0" class="px-2.5 py-1 rounded-lg text-xs font-medium bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200" x-text="`${uploadQueue.length} files`"></span>
                        </div>
                    </div>

                    <!-- Empty Queue State -->
                    <div x-show="uploadQueue.length === 0 && processingUploads.length === 0" class="p-8 text-center">
                        <iconify-icon icon="tabler:inbox" class="text-3xl text-surface-300 dark:text-surface-600 mb-3"></iconify-icon>
                        <p class="text-sm text-surface-500 dark:text-surface-400">No files selected</p>
                    </div>

                    <!-- Processing Files -->
                    <div x-show="processingUploads.length > 0" class="max-h-64 overflow-y-auto">
                        <template x-for="upload in processingUploads" :key="upload.uuid">
                            <div class="px-6 py-3 border-b border-surface-100 dark:border-surface-700 last:border-b-0">
                                <div class="flex items-center">
                                    <div class="flex-shrink-0 mr-3">
                                        <div class="w-6 h-6 text-amber-600 dark:text-amber-400">
                                            <svg class="w-full h-full">
                                                <use href="#svg-spinners--gooey-balls-2"></use>
                                            </svg>
                                        </div>
                                    </div>
                                    <div class="flex-1 min-w-0">
                                        <p class="text-sm font-medium text-surface-900 dark:text-surface-100 truncate" x-text="getTruncatedFilename(upload.filename, 25)"></p>
                                        <p class="text-xs text-amber-600 dark:text-amber-400" x-text="upload.stage || upload.status"></p>
                                    </div>
                                </div>
                            </div>
                        </template>
                    </div>

                    <!-- Queued Files -->
                    <div x-show="uploadQueue.length > 0" class="max-h-64 overflow-y-auto">
                        <template x-for="(file, index) in uploadQueue" :key="index">
                            <div class="px-6 py-3 border-b border-surface-100 dark:border-surface-700 last:border-b-0">
                                <div class="flex items-center justify-between">
                                    <div class="flex-1 min-w-0">
                                        <p class="text-sm font-medium text-surface-900 dark:text-surface-100 truncate" x-text="getTruncatedFilename(file.name, 25)"></p>
                                        <p class="text-xs text-surface-500 dark:text-surface-400" x-text="formatFileSize(file.size)"></p>
                                    </div>
                                    <iconify-icon :icon="getFileIcon(file.type)" class="text-surface-400 dark:text-surface-500 ml-3" width="18" height="18"></iconify-icon>
                                </div>
                            </div>
                        </template>

                        <!-- Queue Summary -->
                        <div x-show="uploadQueue.length > 0" class="px-6 py-3 bg-surface-50 dark:bg-surface-700/50 border-t border-surface-200 dark:border-surface-600">
                            <p class="text-xs font-medium text-surface-600 dark:text-surface-400" x-text="`Total: ${uploadQueue.length} ${uploadQueue.length === 1 ? 'file' : 'files'} (${formatTotalSize()})`"></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Uploads Tab -->
        <div x-show="currentTab === 'recent'" x-transition:enter="transition ease-out duration-300" x-transition:enter-start="opacity-0 transform translate-y-4" x-transition:enter-end="opacity-100 transform translate-y-0">
            <!-- Loading State -->
            <div x-show="isLoading" class="text-center py-16">
                <div class="mx-auto h-20 w-20 rounded-full bg-surface-100 dark:bg-surface-700 flex items-center justify-center mb-6">
                    <iconify-icon icon="tabler:loader-2" class="text-surface-400 dark:text-surface-500 animate-spin" width="40" height="40"></iconify-icon>
                </div>
                <h3 class="text-xl font-semibold text-surface-900 dark:text-surface-100">Loading uploads...</h3>
            </div>

            <!-- No Uploads State -->
            <div x-show="!isLoading && uploads.length === 0 && processingUploads.length === 0" class="text-center py-16">
                <div class="mx-auto h-20 w-20 rounded-full bg-surface-100 dark:bg-surface-700 flex items-center justify-center mb-6">
                    <iconify-icon icon="tabler:inbox" class="text-surface-400 dark:text-surface-500" width="40" height="40"></iconify-icon>
                </div>
                <h3 class="text-xl font-semibold text-surface-900 dark:text-surface-100 mb-3">No uploads found</h3>
                <p class="text-surface-600 dark:text-surface-400 mb-8 max-w-md mx-auto">Upload your first file to get started with document processing.</p>
                <button @click="switchTab('uploads')" class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-lg text-white bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 shadow-sm transition-all duration-200">
                    <iconify-icon icon="tabler:upload" class="mr-2" width="20" height="20"></iconify-icon>
                    Upload Files
                </button>
            </div>

            <!-- Uploads Content -->
            <div x-show="!isLoading && (uploads.length > 0 || processingUploads.length > 0)">
                <!-- Range Text -->
                <div x-show="uploads.length > 0" class="mb-6">
                    <p class="text-sm text-surface-600 dark:text-surface-400">
                        Showing <span x-text="startItem"></span>-<span x-text="endItem"></span> of <span x-text="totalItems"></span> uploads
                    </p>
                </div>

                <!-- Processing Files Section -->
                <div x-show="processingUploads.length > 0" class="mb-6">
                    <h3 class="text-base font-semibold text-surface-900 dark:text-surface-100 mb-3">Processing Files</h3>
                    <div class="space-y-2">
                        <template x-for="upload in processingUploads" :key="upload.uuid">
                            <div class="bg-white dark:bg-surface-800 rounded-lg shadow-sm border border-amber-200 dark:border-amber-700 transition-all duration-200">
                                <div class="px-4 py-3">
                                    <div class="flex items-center justify-between">
                                        <div class="flex items-center space-x-3 flex-1 min-w-0">
                                            <div class="flex-shrink-0">
                                                <div class="w-8 h-8 rounded-lg bg-amber-100 dark:bg-amber-900/50 flex items-center justify-center">
                                                    <div class="w-4 h-4 text-amber-600 dark:text-amber-400">
                                                        <svg class="w-full h-full">
                                                            <use href="#svg-spinners--gooey-balls-2"></use>
                                                        </svg>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="flex-1 min-w-0">
                                                <h4 class="text-sm font-medium text-surface-900 dark:text-surface-100 truncate" x-text="getTruncatedFilename(upload.filename, 35)"></h4>
                                                <div class="flex items-center space-x-4 text-xs text-surface-500 dark:text-surface-400 mt-1">
                                                    <span x-text="formatDate(upload.timestamp)"></span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="flex-shrink-0 ml-4">
                                            <span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300" x-text="upload.stage || upload.status"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </template>
                    </div>
                </div>

                <!-- Completed Uploads Section -->
                <div x-show="uploads.length > 0">
                    <h3 x-show="processingUploads.length > 0" class="text-base font-semibold text-surface-900 dark:text-surface-100 mb-3">Completed Uploads</h3>
                    <div class="space-y-2">
                        <template x-for="upload in uploads" :key="upload.uuid">
                            <div class="bg-white dark:bg-surface-800 rounded-lg shadow-sm hover:shadow-md border border-surface-200 dark:border-surface-700 transition-all duration-200">
                                <div class="px-4 py-3">
                                    <div class="flex items-center justify-between">
                                        <div class="flex items-center space-x-3 flex-1 min-w-0">
                                            <div class="flex-shrink-0">
                                                <div class="w-8 h-8 rounded-lg bg-surface-100 dark:bg-surface-700 flex items-center justify-center">
                                                    <iconify-icon :icon="getFileIcon(upload.mime_type)" class="text-surface-600 dark:text-surface-300" width="16" height="16"></iconify-icon>
                                                </div>
                                            </div>
                                            <div class="flex-1 min-w-0">
                                                <h4 class="text-sm font-medium text-surface-900 dark:text-surface-100 truncate" x-text="getTruncatedFilename(getFilename(upload), 35)"></h4>
                                                <div class="flex items-center space-x-4 text-xs text-surface-500 dark:text-surface-400 mt-1">
                                                    <span x-text="formatDate(upload.created_at)"></span>
                                                    <span>•</span>
                                                    <span x-text="formatFileSize(upload.size)"></span>
                                                    <template x-if="upload.meta && upload.meta.page_count">
                                                        <span>
                                                            <span>•</span>
                                                            <span x-text="`${upload.meta.page_count} ${upload.meta.page_count === 1 ? 'page' : 'pages'}`"></span>
                                                        </span>
                                                    </template>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="flex items-center space-x-3 flex-shrink-0">
                                            <span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium" :class="getStatusColor(upload.status)">
                                                <span x-text="upload.status"></span>
                                            </span>
                                            <button
                                                    @click="deleteUpload(upload)"
                                                    class="p-1.5 text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 hover:bg-red-50 dark:hover:bg-red-900/20 rounded transition-colors duration-200">
                                                <iconify-icon icon="tabler:trash" width="14" height="14"></iconify-icon>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </template>
                    </div>
                </div>

                <!-- Pagination -->
                <div x-show="totalPages > 1" class="mt-8 flex items-center justify-between">
                    <div class="flex items-center space-x-4">
                        <span class="text-sm text-surface-500 dark:text-surface-400">
                            Page <span x-text="currentPage"></span> of <span x-text="totalPages"></span>
                        </span>
                        <div class="text-sm text-surface-500 dark:text-surface-400">
                            <label for="pageSize">Items per page:</label>
                            <select
                                    x-model="pageSize"
                                    @change="handlePageSizeChange"
                                    id="pageSize"
                                    class="ml-2 bg-white dark:bg-surface-800 border border-surface-300 dark:border-surface-600 rounded-lg px-3 py-1 text-surface-700 dark:text-surface-300">
                                <option value="10">10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                        </div>
                    </div>
                    <div class="flex space-x-2">
                        <button
                                @click="prevPage"
                                :disabled="currentPage <= 1"
                                :class="{'opacity-50 cursor-not-allowed': currentPage <= 1}"
                                class="inline-flex items-center px-4 py-2 border border-surface-300 dark:border-surface-600 text-sm font-medium rounded-lg text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 hover:bg-surface-50 dark:hover:bg-surface-700 transition-colors duration-200">
                            <iconify-icon icon="tabler:chevron-left" class="mr-1" width="16" height="16"></iconify-icon>
                            Previous
                        </button>
                        <button
                                @click="nextPage"
                                :disabled="currentPage >= totalPages"
                                :class="{'opacity-50 cursor-not-allowed': currentPage >= totalPages}"
                                class="inline-flex items-center px-4 py-2 border border-surface-300 dark:border-surface-600 text-sm font-medium rounded-lg text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 hover:bg-surface-50 dark:hover:bg-surface-700 transition-colors duration-200">
                            Next
                            <iconify-icon icon="tabler:chevron-right" class="ml-1" width="16" height="16"></iconify-icon>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Status Messages -->
    <div x-show="statusMessage.show" x-transition:enter="transform ease-out duration-300 transition" x-transition:enter-start="translate-y-full opacity-0" x-transition:enter-end="translate-y-0 opacity-100" x-transition:leave="transition ease-in duration-300" x-transition:leave-start="translate-y-0 opacity-100" x-transition:leave-end="translate-y-full opacity-0" class="fixed bottom-4 right-4 max-w-md z-50">
        <div class="flex items-center p-4 rounded-xl shadow-lg border" :class="{
            'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800': statusMessage.type === 'success',
            'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800': statusMessage.type === 'error',
            'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800': statusMessage.type === 'info'
        }">
            <div class="flex-shrink-0 mr-3">
                <template x-if="statusMessage.type === 'success'">
                    <iconify-icon icon="tabler:check-circle" class="h-6 w-6 text-green-600 dark:text-green-400" width="24" height="24"></iconify-icon>
                </template>
                <template x-if="statusMessage.type === 'error'">
                    <iconify-icon icon="tabler:alert-circle" class="h-6 w-6 text-red-600 dark:text-red-400" width="24" height="24"></iconify-icon>
                </template>
                <template x-if="statusMessage.type === 'info'">
                    <iconify-icon icon="tabler:info-circle" class="h-6 w-6 text-blue-600 dark:text-blue-400" width="24" height="24"></iconify-icon>
                </template>
            </div>
            <div class="flex-1">
                <p class="text-sm font-medium" :class="{
                    'text-green-800 dark:text-green-100': statusMessage.type === 'success',
                    'text-red-800 dark:text-red-100': statusMessage.type === 'error',
                    'text-blue-800 dark:text-blue-100': statusMessage.type === 'info'
                }" x-text="statusMessage.text"></p>
            </div>
            <div class="flex-shrink-0 ml-3">
                <button @click="hideStatusMessage" class="inline-flex text-surface-400 hover:text-surface-600 focus:outline-none transition-colors duration-200">
                    <iconify-icon icon="tabler:x" class="h-5 w-5" width="20" height="20"></iconify-icon>
                </button>
            </div>
        </div>
    </div>
</div>
{{ end }}

{{ block customJs() }}
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('uploadsApp', () => ({
            // State
            currentTab: 'uploads',
            isLoading: false,
            isDragging: false,
            isUploading: false,
            uploadQueue: [],
            uploads: [],
            processingUploads: [], // Track uploads that are still processing
            totalItems: 0,
            totalPages: 0,
            currentPage: 1,
            pageSize: 20,
            wippyApi: null,
            uploadSubscriptions: {}, // Keep track of active subscriptions
            processing: {
                total: 0,
                completed: 0,
                failed: 0
            },

            // Status message system
            statusMessage: {
                show: false,
                type: 'info',
                text: '',
                timeout: null
            },

            // Computed
            get startItem() {
                return (this.currentPage - 1) * this.pageSize + 1;
            },

            get endItem() {
                return Math.min(this.startItem + this.pageSize - 1, this.totalItems);
            },

            // Lifecycle
            async initialize() {
                try {
                    this.wippyApi = await window.initWippyApi();
                    console.log('Uploads app initialized');
                    this.fetchUploads();
                } catch (error) {
                    console.error('Failed to initialize:', error);
                    this.showStatus('error', 'Failed to initialize page');
                }
            },

            // Tab management
            switchTab(tab) {
                this.currentTab = tab;
                if (tab === 'recent' && this.uploads.length === 0 && !this.isLoading) {
                    this.fetchUploads();
                }
            },

            // File Handling Methods
            handleFileDrop(event) {
                this.isDragging = false;

                if (event.dataTransfer.files.length > 0) {
                    this.addFilesToQueue(Array.from(event.dataTransfer.files));
                }
            },

            handleFileSelect() {
                if (this.$refs.fileInput.files.length > 0) {
                    this.addFilesToQueue(Array.from(this.$refs.fileInput.files));
                }
            },

            addFilesToQueue(files) {
                if (files.length === 0) return;
                this.uploadQueue = [...this.uploadQueue, ...files];
            },

            async clearFileSelection() {
                if (this.isUploading) {
                    try {
                        const result = await this.wippyApi.iframe.confirm({
                            message: "Uploads are in progress. Do you want to clear the remaining queued files?",
                            header: 'Clear Uploads',
                            icon: 'tabler:alert-triangle',
                            acceptLabel: 'Clear Queue',
                            rejectLabel: 'Cancel',
                            acceptClass: 'p-button-warning',
                            rejectClass: 'p-button-secondary',
                            acceptButtonStyleClass: 'p-button-sm'
                        });

                        if (!result) {
                            return;
                        }
                    } catch (error) {
                        console.error('Confirmation dialog error:', error);
                        return;
                    }

                    // Only clear files that haven't started uploading yet
                    this.uploadQueue = [];
                    this.processing.total = 0;
                    this.processing.completed = 0;
                    this.processing.failed = 0;
                } else {
                    // Clear everything if no uploads are in progress
                    this.$refs.fileInput.value = '';
                    this.uploadQueue = [];
                    this.processing.total = 0;
                    this.processing.completed = 0;
                    this.processing.failed = 0;
                }
            },

            formatTotalSize() {
                const totalSize = this.uploadQueue.reduce((sum, file) => sum + file.size, 0);
                return this.formatFileSize(totalSize);
            },

            // Upload Methods
            async startUpload() {
                if (this.uploadQueue.length === 0) {
                    return;
                }

                if (this.isUploading) {
                    return;
                }

                this.isUploading = true;
                this.processing.total = this.uploadQueue.length;
                this.processing.completed = 0;
                this.processing.failed = 0;

                try {
                    // Process files in batches of 3
                    const maxConcurrent = 3;

                    for (let i = 0; i < this.uploadQueue.length; i += maxConcurrent) {
                        const batch = this.uploadQueue.slice(i, i + maxConcurrent);

                        await Promise.all(batch.map(file => this.uploadFile(file)));

                        // Small delay between batches
                        if (i + maxConcurrent < this.uploadQueue.length) {
                            await new Promise(resolve => setTimeout(resolve, 100));
                        }
                    }

                    // Reset queue
                    this.$refs.fileInput.value = '';
                    this.uploadQueue = [];

                } catch (error) {
                    console.error('Upload error:', error);
                } finally {
                    this.isUploading = false;
                }
            },

            async uploadFile(file) {
                try {
                    const formData = new FormData();
                    formData.append('file', file);

                    const response = await fetch('/api/v1/uploads', {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${this.wippyApi.config.auth.token}`
                        },
                        body: formData
                    });

                    const result = await response.json();

                    if (!response.ok || !result.success) {
                        throw new Error(result.error || 'Upload failed');
                    }

                    // Add to processing uploads
                    this.addProcessingUpload({
                        uuid: result.uuid,
                        filename: file.name,
                        status: 'uploading',
                        timestamp: new Date().toISOString()
                    });

                    // Subscribe to real-time updates for this upload
                    this.subscribeToUploadEvents(result.uuid, file.name);

                    this.processing.completed++;
                    return result;
                } catch (error) {
                    this.processing.failed++;
                    console.error(`Upload failed for ${file.name}:`, error);

                    // Add to regular uploads as failed
                    this.uploads.unshift({
                        uuid: 'local-' + Date.now(),
                        created_at: new Date().toISOString(),
                        status: 'failed',
                        size: file.size,
                        meta: {
                            filename: file.name
                        },
                        mime_type: file.type || 'application/octet-stream'
                    });

                    throw error;
                }
            },

            // Real-time updates for uploads
            addProcessingUpload(upload) {
                // Add to processing uploads array if not already there
                if (!this.processingUploads.some(u => u.uuid === upload.uuid)) {
                    this.processingUploads.push(upload);
                } else {
                    // Update existing entry
                    const index = this.processingUploads.findIndex(u => u.uuid === upload.uuid);
                    if (index >= 0) {
                        this.processingUploads[index] = {
                            ...this.processingUploads[index],
                            ...upload
                        };
                    }
                }
            },

            removeProcessingUpload(uuid) {
                this.processingUploads = this.processingUploads.filter(u => u.uuid !== uuid);
            },

            subscribeToUploadEvents(uuid, filename) {
                if (this.uploadSubscriptions[uuid]) {
                    return; // Already subscribed
                }

                console.log(`Subscribing to upload events for ${uuid}`);

                // Handle upload events
                const handleUploadEvent = (data) => {
                    if (!data || !data.data) return;

                    const eventData = data.data;
                    console.log(`Upload event for ${uuid}:`, eventData);

                    // Update processing upload status
                    this.addProcessingUpload({
                        uuid: eventData.uuid,
                        filename: filename,
                        status: eventData.status,
                        stage: eventData.stage,
                        timestamp: eventData.timestamp
                    });

                    // Check for explicit errors only
                    if (eventData.error) {
                        this.handleFileProcessingError(uuid, filename, eventData.error);
                        return;
                    }

                    // If completed, refresh uploads and unsubscribe
                    if (eventData.status === 'completed' || eventData.status === 'failed' || eventData.status === 'error') {
                        // Fetch the specific upload to add it to the list
                        this.fetchUploadDetails(uuid);

                        // Remove from processing list after a short delay
                        setTimeout(() => {
                            this.removeProcessingUpload(uuid);
                        }, 100);

                        // Unsubscribe
                        this.unsubscribeFromUploadEvents(uuid);
                    }
                };

                // Subscribe to upload events
                this.wippyApi.on(`upload:${uuid}`, handleUploadEvent);
                this.uploadSubscriptions[uuid] = handleUploadEvent;
            },

            unsubscribeFromUploadEvents(uuid) {
                if (!this.uploadSubscriptions[uuid]) return;

                console.log(`Unsubscribing from upload events for ${uuid}`);

                // Unsubscribe from events
                this.wippyApi.off(`upload:${uuid}`, this.uploadSubscriptions[uuid]);
                delete this.uploadSubscriptions[uuid];
            },

            // Handle errors in processing
            handleFileProcessingError(uuid, filename, errorMessage) {
                console.error(`Processing error for ${filename}: ${errorMessage}`);

                // Add to regular uploads as failed
                this.uploads.unshift({
                    uuid: uuid,
                    created_at: new Date().toISOString(),
                    status: 'failed',
                    error: errorMessage,
                    meta: {
                        filename: filename
                    }
                });

                // Remove from processing list
                this.removeProcessingUpload(uuid);

                // Unsubscribe from events
                this.unsubscribeFromUploadEvents(uuid);

                // Update total count
                this.totalItems++;
                this.totalPages = Math.ceil(this.totalItems / this.pageSize);
            },

            async fetchUploadDetails(uuid) {
                try {
                    const response = await fetch(`/api/v1/uploads/${uuid}`, {
                        headers: {
                            'Authorization': `Bearer ${this.wippyApi.config.auth.token}`
                        }
                    });

                    const result = await response.json();

                    if (!response.ok || !result.success) {
                        throw new Error(result.error || 'Failed to fetch upload');
                    }

                    // Add to the beginning of the uploads array if not already there
                    if (!this.uploads.some(u => u.uuid === result.upload.uuid)) {
                        this.uploads.unshift(result.upload);
                        this.totalItems++;
                        this.totalPages = Math.ceil(this.totalItems / this.pageSize);
                    } else {
                        // Update existing entry
                        const index = this.uploads.findIndex(u => u.uuid === result.upload.uuid);
                        if (index >= 0) {
                            this.uploads[index] = result.upload;
                        }
                    }

                } catch (error) {
                    console.error(`Failed to fetch upload ${uuid}:`, error);
                }
            },

            // Fetch Uploads
            async fetchUploads() {
                this.isLoading = true;

                try {
                    // Calculate offset based on page and limit
                    const offset = (this.currentPage - 1) * this.pageSize;

                    const response = await fetch(`/api/v1/uploads/list?limit=${this.pageSize}&offset=${offset}`, {
                        headers: {
                            'Authorization': `Bearer ${this.wippyApi.config.auth.token}`
                        }
                    });

                    const result = await response.json();

                    if (!response.ok || !result.success) {
                        throw new Error(result.error || 'Failed to fetch uploads');
                    }

                    // Update pagination
                    if (result.meta && result.meta.total !== undefined) {
                        this.totalItems = result.meta.total;
                        this.totalPages = Math.ceil(this.totalItems / this.pageSize);
                    }

                    // Update uploads list
                    this.uploads = result.uploads || [];

                    // Check for in-progress uploads
                    const processingUploads = this.uploads.filter(
                        upload => upload.status === 'queued' || upload.status === 'uploading' || upload.status === 'processing'
                    );

                    // Subscribe to events for any processing uploads
                    processingUploads.forEach(upload => {
                        // Add to processing list
                        this.addProcessingUpload({
                            uuid: upload.uuid,
                            filename: this.getFilename(upload),
                            status: upload.status,
                            timestamp: upload.created_at
                        });

                        // Subscribe to events
                        this.subscribeToUploadEvents(upload.uuid, this.getFilename(upload));
                    });

                } catch (error) {
                    console.error('Failed to fetch uploads:', error);
                    this.uploads = [];
                    this.showStatus('error', 'Failed to load uploads');
                } finally {
                    this.isLoading = false;
                }
            },

            // Pagination Methods
            prevPage() {
                if (this.currentPage > 1) {
                    this.currentPage--;
                    this.fetchUploads();
                }
            },

            nextPage() {
                if (this.currentPage < this.totalPages) {
                    this.currentPage++;
                    this.fetchUploads();
                }
            },

            handlePageSizeChange() {
                this.pageSize = parseInt(this.pageSize);
                this.currentPage = 1; // Reset to first page
                this.fetchUploads();
            },

            // Delete Upload
            async deleteUpload(upload) {
                try {
                    const result = await this.wippyApi.iframe.confirm({
                        message: `Are you sure you want to delete "${this.getFilename(upload)}"?`,
                        header: 'Confirm Deletion',
                        icon: 'tabler:trash',
                        acceptLabel: 'Delete',
                        rejectLabel: 'Cancel',
                        acceptClass: 'p-button-danger',
                        rejectClass: 'p-button-secondary',
                        acceptButtonStyleClass: 'p-button-sm'
                    });

                    if (result) {
                        const response = await fetch(`/api/v1/uploads/${upload.uuid}`, {
                            method: 'DELETE',
                            headers: {
                                'Authorization': `Bearer ${this.wippyApi.config.auth.token}`
                            }
                        });

                        const result = await response.json();

                        if (!response.ok || !result.success) {
                            throw new Error(result.error || 'Failed to delete upload');
                        }

                        // Remove from list
                        this.uploads = this.uploads.filter(u => u.uuid !== upload.uuid);

                        // Update total count
                        this.totalItems--;
                        this.totalPages = Math.ceil(this.totalItems / this.pageSize);

                        // Fetch new page if current page is now empty
                        if (this.uploads.length === 0 && this.currentPage > 1) {
                            this.currentPage--;
                            this.fetchUploads();
                        }

                        this.showStatus('success', 'File deleted successfully');
                    }
                } catch (error) {
                    console.error('Failed to delete upload:', error);
                    this.showStatus('error', 'Failed to delete file');
                }
            },

            // Helper Methods
            getFilename(upload) {
                return (upload.meta && upload.meta.filename) ||
                    (upload.metadata && upload.metadata.filename) ||
                    'Unknown file';
            },

            getTruncatedFilename(filename, maxLength = 30) {
                if (!filename || filename.length <= maxLength) return filename;

                const ext = filename.lastIndexOf('.') > -1 ? filename.substring(filename.lastIndexOf('.')) : '';
                const name = filename.substring(0, filename.lastIndexOf('.') > -1 ? filename.lastIndexOf('.') : filename.length);
                return name.substring(0, maxLength - ext.length - 3) + '...' + ext;
            },

            formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';

                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));

                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            },

            formatDate(dateString) {
                let date;

                if (typeof dateString === 'number') {
                    date = new Date(dateString * 1000);
                } else if (typeof dateString === 'string') {
                    date = new Date(dateString);
                } else {
                    date = new Date();
                }

                if (isNaN(date.getTime())) {
                    return 'Invalid date';
                }

                // Format in local timezone
                return date.toLocaleDateString(undefined, {
                    year: 'numeric',
                    month: 'numeric',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            },

            getStatusColor(status) {
                switch(status) {
                    case 'uploaded':
                        return 'bg-primary-100 text-primary-800 dark:bg-primary-900/30 dark:text-primary-400';
                    case 'queued':
                        return 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400';
                    case 'processing':
                        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400';
                    case 'completed':
                        return 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400';
                    case 'error':
                    case 'failed':
                        return 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400';
                    default:
                        return 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400';
                }
            },

            getFileIcon(mimeType) {
                // Default icon
                let icon = 'tabler:file';

                if (!mimeType) return icon;

                // Handle image types with specific icons
                if (mimeType.startsWith('image/')) {
                    if (mimeType === 'image/jpeg' || mimeType === 'image/jpg') {
                        icon = 'tabler:file-type-jpg';
                    } else if (mimeType === 'image/png') {
                        icon = 'tabler:file-type-png';
                    } else if (mimeType === 'image/gif') {
                        icon = 'tabler:file-type-gif';
                    } else if (mimeType === 'image/svg+xml') {
                        icon = 'tabler:file-type-svg';
                    } else if (mimeType === 'image/webp') {
                        icon = 'tabler:photo';
                    } else if (mimeType === 'image/bmp') {
                        icon = 'tabler:photo';
                    } else if (mimeType === 'image/tiff' || mimeType === 'image/tif') {
                        icon = 'tabler:photo';
                    } else {
                        icon = 'tabler:file-image';
                    }
                } else if (mimeType.startsWith('video/')) {
                    if (mimeType === 'video/mp4') {
                        icon = 'tabler:file-type-mp4';
                    } else {
                        icon = 'tabler:file-video';
                    }
                } else if (mimeType.startsWith('audio/')) {
                    if (mimeType === 'audio/mpeg' || mimeType === 'audio/mp3') {
                        icon = 'tabler:file-music';
                    } else {
                        icon = 'tabler:file-audio';
                    }
                } else if (mimeType === 'application/pdf') {
                    icon = 'tabler:file-type-pdf';
                } else if (mimeType === 'application/msword' ||
                    mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
                    icon = 'tabler:file-type-doc';
                } else if (mimeType === 'application/vnd.ms-excel' ||
                    mimeType === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') {
                    icon = 'tabler:file-type-xls';
                } else if (mimeType === 'application/vnd.ms-powerpoint' ||
                    mimeType === 'application/vnd.openxmlformats-officedocument.presentationml.presentation') {
                    icon = 'tabler:file-type-ppt';
                } else if (mimeType === 'application/zip' ||
                    mimeType === 'application/x-zip-compressed' ||
                    mimeType === 'application/x-rar-compressed' ||
                    mimeType === 'application/x-7z-compressed') {
                    icon = 'tabler:file-zip';
                } else if (mimeType === 'text/plain') {
                    icon = 'tabler:file-text';
                } else if (mimeType === 'text/html' || mimeType === 'application/xhtml+xml') {
                    icon = 'tabler:file-code';
                } else if (mimeType === 'application/json') {
                    icon = 'tabler:file-type-json';
                } else if (mimeType === 'text/csv') {
                    icon = 'tabler:file-type-csv';
                } else if (mimeType === 'application/javascript' || mimeType === 'text/javascript') {
                    icon = 'tabler:file-type-js';
                } else if (mimeType === 'text/css') {
                    icon = 'tabler:file-type-css';
                } else if (mimeType.includes('xml')) {
                    icon = 'tabler:file-type-xml';
                }

                return icon;
            },

            // Status message helpers
            showStatus(type, text, duration = 5000) {
                if (this.statusMessage.timeout) {
                    clearTimeout(this.statusMessage.timeout);
                }

                this.statusMessage.type = type;
                this.statusMessage.text = text;
                this.statusMessage.show = true;

                this.statusMessage.timeout = setTimeout(() => {
                    this.hideStatusMessage();
                }, duration);
            },

            hideStatusMessage() {
                this.statusMessage.show = false;
                if (this.statusMessage.timeout) {
                    clearTimeout(this.statusMessage.timeout);
                    this.statusMessage.timeout = null;
                }
            }
        }));
    });
</script>
{{ end }}