{{ extends "common/layout" }}

{* Page title and description *}
{{ block title() }}My Workspace{{ end }}
{{ block metaDescription() }}Your AI workspace with quick access to your primary agent and session management{{ end }}

{{ block mainContent() }}
<div x-data="workspaceApp" x-init="init()" class="max-w-[1800px] mx-auto">

    <!-- Small Onboarding Banner (for returning users) -->
    <div x-show="shouldShowBanner()"
         x-transition:enter="transition ease-out duration-300"
         x-transition:enter-start="opacity-0 translate-y-2"
         x-transition:enter-end="opacity-100 translate-y-0"
         class="mb-6 bg-gradient-to-r from-blue-50 via-purple-50 to-pink-50 dark:from-blue-900/20 dark:via-purple-900/20 dark:to-pink-900/20 border border-blue-200 dark:border-blue-800 rounded-xl p-4 relative shadow-sm">

        <div class="flex items-center justify-between">
            <div class="flex items-center space-x-4 flex-1">
                <div class="flex-shrink-0">
                    <div class="w-10 h-10 rounded-xl bg-gradient-to-br from-blue-500 via-purple-600 to-pink-600 flex items-center justify-center">
                        <iconify-icon icon="tabler:settings-cog" class="text-white" width="20" height="20"></iconify-icon>
                    </div>
                </div>
                <div class="flex-1 min-w-0">
                    <h3 class="font-semibold text-surface-900 dark:text-surface-100 text-sm">Need help getting started?</h3>
                    <p class="text-surface-600 dark:text-surface-400 text-xs mt-0.5">Complete onboarding and setup - learn how to use agents and extend Wippy</p>
                </div>
            </div>

            <div class="flex items-center space-x-3">
                <button @click="navigateToOnboarding()"
                        class="px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white text-sm font-medium rounded-lg transition-all duration-200 flex items-center">
                    Begin
                    <iconify-icon icon="tabler:arrow-right" class="ml-1" width="16" height="16"></iconify-icon>
                </button>
                <button @click="dismissOnboardingBanner()"
                        class="p-2 rounded-lg hover:bg-white/80 dark:hover:bg-surface-700/80 transition-colors">
                    <iconify-icon icon="tabler:x" class="text-surface-500 dark:text-surface-400" width="16" height="16"></iconify-icon>
                </button>
            </div>
        </div>
    </div>

    <!-- Main Content Grid -->
    <div class="grid grid-cols-1 xl:grid-cols-12 gap-8 min-h-[80vh]">

        <!-- Left Side - Primary Agent Section -->
        <div class="xl:col-span-5 flex flex-col">
            <!-- Primary Agent Card - Compact -->
            <div x-show="primaryAgent" class="bg-gradient-to-br from-white to-surface-50 dark:from-surface-800 dark:to-surface-900 rounded-2xl shadow-lg border border-surface-200 dark:border-surface-700 p-6 transition-all duration-300 hover:shadow-xl hover:scale-[1.01] cursor-pointer group" @click="startPrimaryAgentChat()">

                <div class="flex items-center space-x-4">
                    <!-- Compact Icon -->
                    <div class="relative flex-shrink-0">
                        <div class="h-16 w-16 rounded-2xl bg-gradient-to-br from-primary-500 via-primary-600 to-primary-700 flex items-center justify-center shadow-lg group-hover:shadow-primary-500/30 transition-all duration-300">
                            <iconify-icon :icon="primaryAgent?.icon || 'tabler:robot'" class="text-white" width="32" height="32"></iconify-icon>
                        </div>
                        <div class="absolute -top-1 -right-1 h-5 w-5 bg-green-500 rounded-full border-2 border-white dark:border-surface-800 shadow-sm flex items-center justify-center">
                            <iconify-icon icon="tabler:sparkles" class="text-white" width="12" height="12"></iconify-icon>
                        </div>
                    </div>

                    <!-- Agent Info -->
                    <div class="flex-1 min-w-0">
                        <h1 class="text-xl font-bold text-surface-900 dark:text-surface-100 mb-1 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors" x-text="primaryAgent?.title || 'Primary Assistant'"></h1>
                        <p class="text-surface-600 dark:text-surface-400 text-sm line-clamp-2" x-text="primaryAgent?.comment || 'Your intelligent assistant ready to help'"></p>
                    </div>
                </div>

                <!-- Launch Button -->
                <button class="w-full mt-4 bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 text-white px-4 py-3 rounded-xl font-semibold shadow-md hover:shadow-lg transition-all duration-200 flex items-center justify-center">
                    <iconify-icon icon="tabler:message-circle-plus" class="mr-2" width="20" height="20"></iconify-icon>
                    Start New Conversation
                </button>
            </div>

            <!-- Available Agents - Always Visible -->
            <div class="mt-6 bg-white dark:bg-surface-800 rounded-2xl border border-surface-200 dark:border-surface-700 p-6 flex-1">
                <h3 class="text-lg font-semibold text-surface-900 dark:text-surface-100 mb-4 flex items-center">
                    <iconify-icon icon="tabler:robots" class="mr-2" width="20" height="20"></iconify-icon>
                    Available Agents
                    <span class="ml-2 px-2 py-1 rounded-md text-xs font-medium bg-surface-100 dark:bg-surface-700 text-surface-600 dark:text-surface-300" x-text="agents.filter(a => !a.class?.includes('primary')).length"></span>
                </h3>
                <div class="space-y-2">
                    <template x-for="agent in agents.filter(a => !a.class?.includes('primary'))" :key="agent.name">
                        <button @click="startChat(agent)" class="w-full p-3 rounded-xl bg-surface-50 dark:bg-surface-700 hover:bg-surface-100 dark:hover:bg-surface-600 transition-all duration-200 text-left group border border-transparent hover:border-primary-200 dark:hover:border-primary-700">
                            <div class="flex items-center">
                                <div class="h-8 w-8 rounded-lg bg-gradient-to-br from-primary-500 to-primary-600 flex items-center justify-center mr-3 flex-shrink-0 group-hover:scale-105 transition-transform">
                                    <iconify-icon :icon="getAgentIcon(agent)" class="text-white" width="16" height="16"></iconify-icon>
                                </div>
                                <div class="flex-1 min-w-0">
                                    <div class="font-medium text-surface-900 dark:text-surface-100 text-sm truncate group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors" x-text="agent.title"></div>
                                    <div class="text-xs text-surface-500 dark:text-surface-400 truncate" x-text="agent.comment"></div>
                                </div>
                                <iconify-icon icon="tabler:arrow-right" class="text-surface-300 dark:text-surface-600 group-hover:text-primary-500 dark:group-hover:text-primary-400 transition-colors flex-shrink-0 ml-2" width="16" height="16"></iconify-icon>
                            </div>
                        </button>
                    </template>
                </div>
            </div>
        </div>

        <!-- Right Side - Recent Sessions -->
        <div class="xl:col-span-7 flex flex-col">
            <!-- Sessions Header -->
            <div class="flex items-center justify-between mb-6">
                <div class="flex items-center gap-4">
                    <div>
                        <h2 class="text-2xl font-bold text-surface-900 dark:text-surface-100">Recent Sessions</h2>
                        <p class="text-surface-600 dark:text-surface-400 mt-1" x-text="`${sessionCount} total conversations`"></p>
                    </div>

                    <!-- Chat Mode Toggle - Moved here and styled better -->
                    <div class="flex items-center gap-1 bg-surface-100 dark:bg-surface-800 rounded-lg p-1 border border-surface-200 dark:border-surface-700">
                        <button
                                @click="chatMode = 'fullscreen'"
                                :class="chatMode === 'fullscreen' ? 'bg-white dark:bg-surface-700 shadow-sm text-surface-900 dark:text-surface-100' : 'text-surface-600 dark:text-surface-400 hover:text-surface-900 dark:hover:text-surface-100'"
                                class="px-2.5 py-1.5 rounded text-xs font-medium transition-all duration-200 flex items-center"
                                title="Open chats in full screen">
                            <iconify-icon icon="tabler:maximize" class="mr-1.5" width="12" height="12"></iconify-icon>
                            Full
                        </button>
                        <button
                                @click="chatMode = 'panel'"
                                :class="chatMode === 'panel' ? 'bg-white dark:bg-surface-700 shadow-sm text-surface-900 dark:text-surface-100' : 'text-surface-600 dark:text-surface-400 hover:text-surface-900 dark:hover:text-surface-100'"
                                class="px-2.5 py-1.5 rounded text-xs font-medium transition-all duration-200 flex items-center"
                                title="Open chats in side panel">
                            <iconify-icon icon="tabler:layout-sidebar-right" class="mr-1.5" width="12" height="12"></iconify-icon>
                            Panel
                        </button>
                    </div>
                </div>

                <div class="flex items-center gap-3">
                    <!-- Search -->
                    <div class="relative">
                        <input
                                type="text"
                                x-model="searchQuery"
                                @input="filterSessions()"
                                class="w-64 pl-10 pr-4 py-2.5 border border-surface-200 dark:border-surface-600 rounded-xl bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 placeholder-surface-500 dark:placeholder-surface-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all"
                                placeholder="Search sessions...">
                        <iconify-icon icon="tabler:search" class="absolute left-3 top-1/2 transform -translate-y-1/2 text-surface-400 dark:text-surface-500" width="18" height="18"></iconify-icon>
                    </div>

                    <!-- Refresh - Fixed alignment -->
                    <button @click="refreshSessions()" :disabled="loading.sessions" class="flex items-center justify-center w-11 h-11 bg-surface-100 dark:bg-surface-800 hover:bg-surface-200 dark:hover:bg-surface-700 rounded-xl border border-surface-200 dark:border-surface-700 transition-colors disabled:opacity-50">
                        <iconify-icon :icon="loading.sessions ? 'tabler:loader' : 'tabler:refresh'" :class="{'animate-spin': loading.sessions}" class="text-surface-600 dark:text-surface-400" width="18" height="18"></iconify-icon>
                    </button>
                </div>
            </div>

            <!-- Sessions Content -->
            <div class="flex-1 bg-white dark:bg-surface-800 rounded-2xl border border-surface-200 dark:border-surface-700 overflow-hidden">

                <!-- Loading State -->
                <div x-show="loading.sessions && sessions.length === 0" class="flex flex-col items-center justify-center py-20">
                    <div class="relative">
                        <div class="w-16 h-16 rounded-2xl bg-surface-100 dark:bg-surface-700 flex items-center justify-center mb-6">
                            <iconify-icon icon="tabler:loader-2" class="animate-spin text-surface-400 dark:text-surface-500" width="32" height="32"></iconify-icon>
                        </div>
                    </div>
                    <h3 class="text-xl font-semibold text-surface-900 dark:text-surface-100 mb-2">Loading sessions...</h3>
                    <p class="text-surface-600 dark:text-surface-400">Please wait while we fetch your conversations</p>
                </div>

                <!-- Empty State - Enhanced -->
                <div x-show="!loading.sessions && paginatedSessions.length === 0" class="flex flex-col items-center justify-center py-20">
                    <div class="relative mb-6">
                        <div class="w-20 h-20 rounded-3xl bg-gradient-to-br from-surface-100 to-surface-200 dark:from-surface-700 dark:to-surface-800 flex items-center justify-center">
                            <iconify-icon :icon="searchQuery ? 'tabler:search-off' : 'tabler:message-plus'" class="text-surface-400 dark:text-surface-500" width="40" height="40"></iconify-icon>
                        </div>
                        <div class="absolute -bottom-1 -right-1 w-8 h-8 bg-primary-500 rounded-full flex items-center justify-center">
                            <iconify-icon icon="tabler:sparkles" class="text-white" width="16" height="16"></iconify-icon>
                        </div>
                    </div>

                    <h3 class="text-xl font-semibold text-surface-900 dark:text-surface-100 mb-3">
                        <span x-show="searchQuery">No matching sessions</span>
                        <span x-show="!searchQuery">Ready to start</span>
                    </h3>

                    <p class="text-surface-600 dark:text-surface-400 text-center max-w-md mb-6">
                        <span x-show="searchQuery">No sessions match your search terms. Try different keywords or clear the search to see all sessions.</span>
                        <span x-show="!searchQuery">You haven't started any conversations yet. Click on Wippy or any agent to begin your first session.</span>
                    </p>

                    <div class="flex items-center gap-3">
                        <button x-show="searchQuery" @click="searchQuery = ''; filterSessions()" class="px-4 py-2 text-sm font-medium text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-700 border border-surface-200 dark:border-surface-600 rounded-lg hover:bg-surface-50 dark:hover:bg-surface-600 transition-colors">
                            Clear Search
                        </button>
                        <button x-show="!searchQuery && primaryAgent" @click="startPrimaryAgentChat()" class="px-6 py-2 text-sm font-semibold text-white bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 flex items-center">
                            <iconify-icon icon="tabler:message-circle-plus" class="mr-2" width="16" height="16"></iconify-icon>
                            Start with Wippy
                        </button>
                    </div>
                </div>

                <!-- Sessions List -->
                <div x-show="paginatedSessions.length > 0" class="divide-y divide-surface-200 dark:divide-surface-700">
                    <template x-for="session in paginatedSessions" :key="session.session_id">
                        <div :class="getSessionRowClass(session)" @click="resumeSession(session.session_id)">
                            <div class="flex items-start space-x-4 p-4">

                                <!-- Session Icon & Status -->
                                <div class="flex-shrink-0 relative">
                                    <div :class="getSessionIconClass(session)">
                                        <iconify-icon icon="tabler:message-circle" class="text-white" width="18" height="18"></iconify-icon>
                                    </div>
                                    <div x-show="session.status === 'running'" class="absolute -top-1 -right-1 h-3 w-3 bg-green-500 rounded-full border-2 border-white dark:border-surface-800 animate-pulse"></div>
                                </div>

                                <!-- Session Content -->
                                <div class="flex-1 min-w-0">
                                    <div class="flex items-start justify-between">
                                        <div class="flex-1 min-w-0 mr-4">
                                            <h3 class="font-semibold text-surface-900 dark:text-surface-100 truncate mb-1" x-text="session.title || `${session.agent_title || session.current_agent || 'Unnamed'} Session`"></h3>

                                            <!-- Agent Badge and Context Badge in same row -->
                                            <div class="flex items-center gap-4 mb-1">
                                                <div class="flex items-center gap-2">
                                                    <div x-show="session.current_agent" class="inline-flex items-center px-2 py-0.5 rounded-md text-xs font-medium bg-primary-100 dark:bg-primary-900/30 text-primary-700 dark:text-primary-400">
                                                        <iconify-icon icon="tabler:robot" class="mr-1" width="11" height="11"></iconify-icon>
                                                        <span x-text="session.agent_title || session.current_agent"></span>
                                                    </div>
                                                    <div x-show="session.public_meta && session.public_meta.length > 0" class="inline-flex items-center px-2 py-0.5 rounded-md text-xs font-medium bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-400 max-w-20" title="Session has workspace context">
                                                        <iconify-icon icon="tabler:folder-share" class="mr-1 flex-shrink-0" width="11" height="11"></iconify-icon>
                                                        <span class="truncate" x-text="session.public_meta[0].title"></span>
                                                    </div>
                                                </div>

                                                <!-- Token Usage and Time -->
                                                <div class="flex items-center space-x-4 text-sm">
                                                    <div x-show="getSessionTokens(session)" class="hidden sm:flex items-center text-surface-600 dark:text-surface-400">
                                                        <iconify-icon icon="tabler:coin" class="mr-1" width="13" height="13"></iconify-icon>
                                                        <span class="font-semibold" x-text="formatTokens(getSessionTokens(session))"></span>
                                                        <span class="ml-1">tokens</span>
                                                        <!-- Token Usage Indicator -->
                                                        <iconify-icon
                                                                x-show="getTokenIndicator(getSessionTokens(session)).icon"
                                                                :icon="getTokenIndicator(getSessionTokens(session)).icon"
                                                                :class="getTokenIndicator(getSessionTokens(session)).class"
                                                                :title="getTokenTooltip(getSessionTokens(session))"
                                                                class="ml-1.5"
                                                                width="14"
                                                                height="14">
                                                        </iconify-icon>
                                                    </div>

                                                    <div class="flex items-center text-surface-500 dark:text-surface-400">
                                                        <iconify-icon icon="tabler:clock" class="mr-1" width="13" height="13"></iconify-icon>
                                                        <span x-text="getRelativeTime(session.last_message_date)"></span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Actions -->
                                        <div class="flex items-center space-x-2">
                                            <button @click.stop="deleteSession(session)" class="p-1.5 text-surface-400 hover:text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors opacity-0 group-hover:opacity-100" title="Delete session">
                                                <iconify-icon icon="tabler:trash" width="14" height="14"></iconify-icon>
                                            </button>
                                            <iconify-icon icon="tabler:chevron-right" class="text-surface-300 dark:text-surface-600 group-hover:text-surface-500 dark:group-hover:text-surface-400 transition-colors" width="18" height="18"></iconify-icon>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </template>
                </div>

                <!-- Pagination -->
                <div x-show="filteredSessions.length > pageSize" class="border-t border-surface-200 dark:border-surface-700 bg-surface-50 dark:bg-surface-900/50 px-6 py-4">
                    <div class="flex items-center justify-between">
                        <div class="text-sm text-surface-600 dark:text-surface-400">
                            Showing <span class="font-medium" x-text="getStartIndex()"></span> to
                            <span class="font-medium" x-text="getEndIndex()"></span> of
                            <span class="font-medium" x-text="filteredSessions.length"></span> sessions
                        </div>
                        <div class="flex space-x-2">
                            <button @click="prevPage()" :disabled="currentPage === 0" class="px-4 py-2 text-sm font-medium text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 border border-surface-200 dark:border-surface-700 rounded-lg hover:bg-surface-50 dark:hover:bg-surface-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors">
                                Previous
                            </button>
                            <button @click="nextPage()" :disabled="getEndIndex() >= filteredSessions.length" class="px-4 py-2 text-sm font-medium text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 border border-surface-200 dark:border-surface-700 rounded-lg hover:bg-surface-50 dark:hover:bg-surface-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors">
                                Next
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Status Messages -->
    <div x-show="notification.show" x-transition:enter="transform ease-out duration-300 transition" x-transition:enter-start="translate-y-full opacity-0" x-transition:enter-end="translate-y-0 opacity-100" x-transition:leave="transition ease-in duration-300" x-transition:leave-start="translate-y-0 opacity-100" x-transition:leave-end="translate-y-full opacity-0" class="fixed bottom-4 right-4 max-w-md z-50">
        <div class="flex items-center p-4 rounded-xl shadow-lg border" :class="{
            'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800': notification.type === 'success',
            'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800': notification.type === 'error',
            'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800': notification.type === 'info'
        }">
            <div class="flex-shrink-0 mr-3">
                <template x-if="notification.type === 'success'">
                    <iconify-icon icon="tabler:check-circle" class="h-6 w-6 text-green-600 dark:text-green-400" width="24" height="24"></iconify-icon>
                </template>
                <template x-if="notification.type === 'error'">
                    <iconify-icon icon="tabler:alert-circle" class="h-6 w-6 text-red-600 dark:text-red-400" width="24" height="24"></iconify-icon>
                </template>
                <template x-if="notification.type === 'info'">
                    <iconify-icon icon="tabler:info-circle" class="h-6 w-6 text-blue-600 dark:text-blue-400" width="24" height="24"></iconify-icon>
                </template>
            </div>
            <div class="flex-1">
                <p class="text-sm font-medium" :class="{
                    'text-green-800 dark:text-green-100': notification.type === 'success',
                    'text-red-800 dark:text-red-100': notification.type === 'error',
                    'text-blue-800 dark:text-blue-100': notification.type === 'info'
                }" x-text="notification.message"></p>
            </div>
            <div class="flex-shrink-0 ml-3">
                <button @click="hideNotification()" class="inline-flex text-surface-400 hover:text-surface-600 focus:outline-none transition-colors duration-200">
                    <iconify-icon icon="tabler:x" class="h-5 w-5" width="20" height="20"></iconify-icon>
                </button>
            </div>
        </div>
    </div>
</div>
{{ end }}

{{ block customJs() }}
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('workspaceApp', () => ({
            // State
            api: null,
            on: null,
            searchQuery: '',
            chatMode: 'fullscreen', // 'fullscreen' or 'panel'

            // Onboarding state
            onboarding: {
                hasVisited: false,
                bannerDismissed: false
            },

            // Data
            agents: [],
            sessions: [],
            sessionCount: 0,
            filteredSessions: [],
            primaryAgent: null,

            // Pagination
            currentPage: 0,
            pageSize: 10,

            // Loading states
            loading: {
                agents: false,
                sessions: false
            },

            // Error states
            errors: {
                agents: null,
                sessions: null
            },

            // Notification system
            notification: {
                show: false,
                type: 'info',
                message: '',
                timeout: null
            },

            // Initialization
            async init() {
                try {
                    this.api = await window.initWippyApi();
                    this.on = this.api.on;

                    // Check onboarding state
                    this.checkOnboardingState();

                    // Subscribe to registry version changes
                    this.on('registry:version', ({ message }) => {
                        console.log('Registry version changed:', message);
                        this.loadAgents();
                    });

                    await Promise.all([this.loadAgents(), this.loadSessions()]);

                    // Check if should auto-redirect to onboarding
                    this.checkAutoRedirect();
                } catch (error) {
                    console.error('Failed to initialize workspace:', error);
                    this.showNotification('error', 'Failed to initialize workspace');
                }
            },

            // Onboarding methods
            checkOnboardingState() {
                // Check if user has visited onboarding before
                this.onboarding.hasVisited = localStorage.getItem('wippy_onboarding_visited') === 'true';

                // Check if banner was dismissed
                this.onboarding.bannerDismissed = localStorage.getItem('wippy_onboarding_banner_dismissed') === 'true';
            },

            checkAutoRedirect() {
                // Auto-redirect if: no onboarding visited flag AND no sessions
                if (!this.onboarding.hasVisited && this.sessionCount === 0) {
                    console.log('First-time user detected, redirecting to onboarding...');
                    this.navigateToOnboarding();
                }
            },

            shouldShowBanner() {
                // Show banner if user has sessions (not first-time) but haven't dismissed banner
                // OR if they've visited onboarding but haven't dismissed banner
                return this.onboarding.hasVisited && !this.onboarding.bannerDismissed;
            },

            async navigateToOnboarding() {
                try {
                    // Mark that user has visited onboarding
                    localStorage.setItem('wippy_onboarding_visited', 'true');
                    this.onboarding.hasVisited = true;

                    // Use Wippy API for navigation instead of window.location
                    if (this.api && this.api.iframe && this.api.iframe.navigate) {
                        await this.api.iframe.navigate('/c/userspace.onboard.views:onboard');
                    } else {
                        // Fallback if navigate method not available
                        window.location.href = '/c/userspace.onboard.views:onboard';
                    }
                } catch (error) {
                    console.error('Failed to navigate to onboarding:', error);
                    this.showNotification('error', 'Failed to navigate to onboarding');
                }
            },

            dismissOnboardingBanner() {
                this.onboarding.bannerDismissed = true;
                localStorage.setItem('wippy_onboarding_banner_dismissed', 'true');
            },

            // Agent methods
            async loadAgents() {
                this.loading.agents = true;
                this.errors.agents = null;

                try {
                    const response = await this.api.api.get('/api/v1/agents/list');

                    if (!response.data.success) {
                        throw new Error(response.data.error || 'Failed to load agents');
                    }

                    this.agents = (response.data.agents || []).map((agent, index) => ({
                        ...agent,
                        _id: agent.start_token || agent.name || `agent-${index}`,
                        title: agent.title || 'Unnamed Agent',
                        comment: agent.comment || 'No description available',
                        tags: agent.tags || []
                    }));

                    // Find primary agent
                    this.primaryAgent = this.agents.find(agent =>
                        agent.class && Array.isArray(agent.class) && agent.class.includes('primary')
                    );

                    console.log(`Loaded ${this.agents.length} agents`);
                } catch (error) {
                    console.error('Error loading agents:', error);
                    this.errors.agents = error.message;
                    this.agents = [];
                } finally {
                    this.loading.agents = false;
                }
            },

            async startChat(agent) {
                if (!agent || !agent.start_token) {
                    this.showNotification('error', 'Invalid agent data');
                    return;
                }

                try {
                    const usePanel = this.chatMode === 'panel';
                    await this.api.iframe.startChat(agent.start_token, usePanel);
                } catch (error) {
                    console.error('Failed to start chat:', error);
                    this.showNotification('error', `Failed to start chat: ${error.message}`);
                }
            },

            async startPrimaryAgentChat() {
                if (this.primaryAgent) {
                    await this.startChat(this.primaryAgent);
                }
            },

            getAgentIcon(agent) {
                if (!agent || !agent.icon) return 'tabler:robot';
                let iconClass = agent.icon.replace('icon-', '');
                return iconClass.startsWith('tabler:') ? iconClass : 'tabler:' + iconClass;
            },

            // Session methods
            async loadSessions() {
                this.loading.sessions = true;
                this.errors.sessions = null;

                try {
                    const response = await this.api.api.get('/api/v1/sessions', {
                        params: { limit: 100 }
                    });

                    if (!response.data.success) {
                        throw new Error(response.data.error || 'Failed to load sessions');
                    }

                    this.sessions = (response.data.sessions || []).map((session, index) => ({
                        ...session,
                        _id: session.session_id || `session-${index}`
                    }));
                    this.sessionCount = response.data.count || 0;

                    await this.fetchAgentTitles();
                    this.filterSessions();

                    console.log(`Loaded ${this.sessions.length} sessions (${this.sessionCount} total)`);
                } catch (error) {
                    console.error('Error loading sessions:', error);
                    this.errors.sessions = error.message;
                    this.sessions = [];
                } finally {
                    this.loading.sessions = false;
                }
            },

            async fetchAgentTitles() {
                try {
                    const agentNames = [...new Set(this.sessions
                        .filter(session => session.current_agent)
                        .map(session => session.current_agent))];

                    if (agentNames.length === 0) return;

                    const response = await this.api.api.get('/api/v1/agents/by-name', {
                        params: { agents: agentNames.join(',') }
                    });

                    if (response.data.success) {
                        this.sessions = this.sessions.map(session => ({
                            ...session,
                            agent_title: response.data.agents[session.current_agent] || session.current_agent
                        }));
                    }
                } catch (error) {
                    console.warn('Failed to fetch agent titles:', error);
                }
            },

            filterSessions() {
                this.currentPage = 0;

                if (!this.searchQuery) {
                    this.filteredSessions = [...this.sessions];
                    return;
                }

                const query = this.searchQuery.toLowerCase();
                this.filteredSessions = this.sessions.filter(session => {
                    return (
                        (session.title && session.title.toLowerCase().includes(query)) ||
                        (session.session_id && session.session_id.toLowerCase().includes(query)) ||
                        (session.agent_title && session.agent_title.toLowerCase().includes(query)) ||
                        (session.current_agent && session.current_agent.toLowerCase().includes(query))
                    );
                });
            },

            async refreshSessions() {
                await this.loadSessions();
            },

            // Pagination
            get paginatedSessions() {
                const start = this.currentPage * this.pageSize;
                return this.filteredSessions.slice(start, start + this.pageSize);
            },

            prevPage() {
                if (this.currentPage > 0) {
                    this.currentPage--;
                }
            },

            nextPage() {
                if (this.getEndIndex() < this.filteredSessions.length) {
                    this.currentPage++;
                }
            },

            getStartIndex() {
                return this.filteredSessions.length === 0 ? 0 : (this.currentPage * this.pageSize) + 1;
            },

            getEndIndex() {
                return Math.min((this.currentPage + 1) * this.pageSize, this.filteredSessions.length);
            },

            // Session utility methods
            getSessionAge(timestamp) {
                if (!timestamp) return 'old';
                try {
                    const date = new Date(timestamp);
                    const now = new Date();
                    const diffHours = (now - date) / (1000 * 60 * 60);
                    if (diffHours < 1) return 'recent';
                    if (diffHours < 24) return 'medium';
                    return 'old';
                } catch (e) {
                    return 'old';
                }
            },

            getSessionRowClass(session) {
                const age = this.getSessionAge(session.last_message_date || session.start_date);
                let baseClass = 'cursor-pointer transition-all duration-200 hover:bg-surface-50 dark:hover:bg-surface-700/50 group';

                switch (age) {
                    case 'recent':
                        return baseClass + ' bg-gradient-to-r from-white to-primary-50/30 dark:from-surface-800 dark:to-primary-900/20';
                    case 'medium':
                        return baseClass + ' bg-gradient-to-r from-white to-amber-50/20 dark:from-surface-800 dark:to-amber-900/10';
                    case 'old':
                        return baseClass + ' opacity-75';
                    default:
                        return baseClass;
                }
            },

            getSessionIconClass(session) {
                const age = this.getSessionAge(session.last_message_date || session.start_date);
                const base = 'h-10 w-10 rounded-xl flex items-center justify-center shadow-md';

                switch (age) {
                    case 'recent': return base + ' bg-gradient-to-br from-primary-500 to-primary-600';
                    case 'medium': return base + ' bg-gradient-to-br from-amber-500 to-amber-600';
                    case 'old': return base + ' bg-gradient-to-br from-surface-500 to-surface-600';
                    default: return base + ' bg-gradient-to-br from-primary-500 to-primary-600';
                }
            },

            async resumeSession(sessionId) {
                try {
                    const usePanel = this.chatMode === 'panel';
                    await this.api.iframe.openSession(sessionId, usePanel);
                } catch (error) {
                    console.error('Failed to resume session:', error);
                    this.showNotification('error', `Failed to resume session: ${error.message}`);
                }
            },

            async deleteSession(session) {
                try {
                    const confirmed = await this.api.iframe.confirm({
                        message: 'Are you sure you want to delete this session? This action cannot be undone.',
                        header: 'Delete Session',
                        icon: 'tabler:trash',
                        acceptLabel: 'Delete',
                        rejectLabel: 'Cancel',
                        acceptClass: 'p-button-danger',
                        rejectClass: 'p-button-secondary'
                    });

                    if (!confirmed) return;

                    const response = await this.api.api.delete('/api/v1/sessions/delete', {
                        params: { session_id: session.session_id }
                    });

                    if (!response.data.success) {
                        throw new Error(response.data.error || 'Failed to delete session');
                    }

                    this.sessions = this.sessions.filter(s => s.session_id !== session.session_id);
                    this.sessionCount = Math.max(0, this.sessionCount - 1);
                    this.filterSessions();

                    this.showNotification('success', 'Session deleted successfully');
                } catch (error) {
                    console.error('Failed to delete session:', error);
                    this.showNotification('error', `Failed to delete session: ${error.message}`);
                }
            },

            // Token utilities
            getSessionTokens(session) {
                return session.meta?.tokens?.total_tokens ||
                    (session.meta?.tokens?.prompt_tokens || 0) + (session.meta?.tokens?.completion_tokens || 0) ||
                    0;
            },

            getTokenIndicator(tokens) {
                if (tokens > 4000000) {
                    return { icon: 'tabler:flame', class: 'text-red-500 animate-pulse' };
                }
                if (tokens > 2000000) {
                    return { icon: 'tabler:alert-triangle-filled', class: 'text-red-500' };
                }
                if (tokens > 1000000) {
                    return { icon: 'tabler:circle-filled', class: 'text-orange-500' };
                }
                if (tokens > 500000) {
                    return { icon: 'tabler:circle-filled', class: 'text-yellow-500' };
                }
                return { icon: null, class: '' };
            },

            getTokenTooltip(tokens) {
                if (tokens > 4000000) return 'Extreme token usage (> 4M)';
                if (tokens > 2000000) return 'Very high token usage (> 2M)';
                if (tokens > 1000000) return 'High token usage (> 1M)';
                if (tokens > 500000) return 'Moderate token usage (> 500K)';
                return '';
            },

            formatTokens(num) {
                if (!num || num === 0) return '0';
                if (num >= 1000000) {
                    return (num / 1000000).toFixed(1) + 'M';
                }
                if (num >= 1000) {
                    return (num / 1000).toFixed(1) + 'K';
                }
                return num.toLocaleString();
            },

            getRelativeTime(timestamp) {
                if (!timestamp) return 'Unknown';
                try {
                    const date = new Date(timestamp);
                    const now = new Date();
                    const diffMs = now - date;
                    const diffMins = Math.floor(diffMs / (1000 * 60));
                    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
                    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

                    if (diffMins < 1) return 'Just now';
                    if (diffMins < 60) return `${diffMins}m ago`;
                    if (diffHours < 24) return `${diffHours}h ago`;
                    if (diffDays < 7) return `${diffDays}d ago`;

                    return new Intl.DateTimeFormat(undefined, {
                        month: 'short',
                        day: 'numeric'
                    }).format(date);
                } catch (e) {
                    return 'Unknown';
                }
            },

            // Notification system
            showNotification(type, message, duration = 5000) {
                if (this.notification.timeout) {
                    clearTimeout(this.notification.timeout);
                }

                this.notification.type = type;
                this.notification.message = message;
                this.notification.show = true;

                this.notification.timeout = setTimeout(() => {
                    this.hideNotification();
                }, duration);
            },

            hideNotification() {
                this.notification.show = false;
                if (this.notification.timeout) {
                    clearTimeout(this.notification.timeout);
                    this.notification.timeout = null;
                }
            }
        }));
    });
</script>
{{ end }}